/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.com.mtanuri.forms.model.impl;

import br.com.mtanuri.forms.model.Forms;
import br.com.mtanuri.forms.model.FormsModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;
import java.sql.Types;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;






/**
 * The base model implementation for the Forms service. Represents a row in the &quot;MTANURI_Forms&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FormsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FormsImpl
 * @generated
 */
public class FormsModelImpl extends BaseModelImpl<Forms> implements FormsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a forms model instance should use the <code>Forms</code> interface instead.
	 */
	public static final String TABLE_NAME = "MTANURI_Forms";

	public static final Object[][] TABLE_COLUMNS = {
		{"formId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"formName", Types.VARCHAR}, {"createDateTime", Types.BIGINT},
		{"content", Types.VARCHAR}, {"files", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("formId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("formName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDateTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("files", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MTANURI_Forms (formId LONG not null primary key,groupId LONG,formName VARCHAR(75) null,createDateTime LONG,content VARCHAR(75) null,files VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table MTANURI_Forms";

	public static final String ORDER_BY_JPQL = " ORDER BY forms.formId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY MTANURI_Forms.formId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long FORMNAME_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long FORMID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public FormsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _formId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFormId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _formId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Forms.class;
	}

	@Override
	public String getModelClassName() {
		return Forms.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Forms, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Forms, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Forms, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Forms)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Forms, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Forms, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Forms)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Forms, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Forms, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Forms>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Forms.class.getClassLoader(), Forms.class, ModelWrapper.class);

		try {
			Constructor<Forms> constructor =
				(Constructor<Forms>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Forms, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Forms, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Forms, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Forms, Object>>();
		Map<String, BiConsumer<Forms, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Forms, ?>>();

		attributeGetterFunctions.put("formId", Forms::getFormId);
		attributeSetterBiConsumers.put(
			"formId", (BiConsumer<Forms, Long>)Forms::setFormId);
		attributeGetterFunctions.put("groupId", Forms::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Forms, Long>)Forms::setGroupId);
		attributeGetterFunctions.put("formName", Forms::getFormName);
		attributeSetterBiConsumers.put(
			"formName", (BiConsumer<Forms, String>)Forms::setFormName);
		attributeGetterFunctions.put(
			"createDateTime", Forms::getCreateDateTime);
		attributeSetterBiConsumers.put(
			"createDateTime",
			(BiConsumer<Forms, Long>)Forms::setCreateDateTime);
		attributeGetterFunctions.put("content", Forms::getContent);
		attributeSetterBiConsumers.put(
			"content", (BiConsumer<Forms, String>)Forms::setContent);
		attributeGetterFunctions.put("files", Forms::getFiles);
		attributeSetterBiConsumers.put(
			"files", (BiConsumer<Forms, String>)Forms::setFiles);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getFormId() {
		return _formId;
	}

	@Override
	public void setFormId(long formId) {
		_formId = formId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public String getFormName() {
		if (_formName == null) {
			return "";
		}
		else {
			return _formName;
		}
	}

	@Override
	public void setFormName(String formName) {
		_columnBitmask |= FORMNAME_COLUMN_BITMASK;

		if (_originalFormName == null) {
			_originalFormName = _formName;
		}

		_formName = formName;
	}

	public String getOriginalFormName() {
		return GetterUtil.getString(_originalFormName);
	}

	@Override
	public long getCreateDateTime() {
		return _createDateTime;
	}

	@Override
	public void setCreateDateTime(long createDateTime) {
		_createDateTime = createDateTime;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public String getFiles() {
		if (_files == null) {
			return "";
		}
		else {
			return _files;
		}
	}

	@Override
	public void setFiles(String files) {
		_files = files;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Forms.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Forms toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Forms>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FormsImpl formsImpl = new FormsImpl();

		formsImpl.setFormId(getFormId());
		formsImpl.setGroupId(getGroupId());
		formsImpl.setFormName(getFormName());
		formsImpl.setCreateDateTime(getCreateDateTime());
		formsImpl.setContent(getContent());
		formsImpl.setFiles(getFiles());

		formsImpl.resetOriginalValues();

		return formsImpl;
	}

	@Override
	public int compareTo(Forms forms) {
		long primaryKey = forms.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Forms)) {
			return false;
		}

		Forms forms = (Forms)object;

		long primaryKey = forms.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		FormsModelImpl formsModelImpl = this;

		formsModelImpl._originalGroupId = formsModelImpl._groupId;

		formsModelImpl._setOriginalGroupId = false;

		formsModelImpl._originalFormName = formsModelImpl._formName;

		formsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Forms> toCacheModel() {
		FormsCacheModel formsCacheModel = new FormsCacheModel();

		formsCacheModel.formId = getFormId();

		formsCacheModel.groupId = getGroupId();

		formsCacheModel.formName = getFormName();

		String formName = formsCacheModel.formName;

		if ((formName != null) && (formName.length() == 0)) {
			formsCacheModel.formName = null;
		}

		formsCacheModel.createDateTime = getCreateDateTime();

		formsCacheModel.content = getContent();

		String content = formsCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			formsCacheModel.content = null;
		}

		formsCacheModel.files = getFiles();

		String files = formsCacheModel.files;

		if ((files != null) && (files.length() == 0)) {
			formsCacheModel.files = null;
		}

		return formsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Forms, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Forms, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Forms, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Forms)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Forms, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Forms, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Forms, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Forms)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Forms>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _formId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _formName;
	private String _originalFormName;
	private long _createDateTime;
	private String _content;
	private String _files;
	private long _columnBitmask;
	private Forms _escapedModel;

}